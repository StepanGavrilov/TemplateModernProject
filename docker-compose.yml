version: "3"
networks:
  monitoring:
    driver: bridge

services:

  postgres:
    container_name: "postgres_${CONTOUR}"
    image: postgres:13.3
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    env_file:
      - .env
    volumes:
      - "${POSTGRES_INIT_SCRIPT}"
      - "${POSTGRES_LOG}"
      - "${PGDATA}"
      - "${PG_CONF}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - monitoring

  api:
    container_name: "api_${CONTOUR}"
    restart: on-failure
    entrypoint: [ "/bin/sh", "/docker/api/api.sh", "Development" ]
    build:
      context: .
      dockerfile: docker/api/Dockerfile_api
    env_file:
      - .env
    ports:
      - "127.0.0.1:${API_HOST_PORT}:${API_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monitoring

  prometheus:
    container_name: "prometheus_${CONTOUR}"
    image: prom/prometheus
    restart: on-failure
    depends_on:
      - postgres
    command:
      - "${PROMETHEUS_CONFIG_FILE}"
      - "${PROMETHEUS_STORAGE}"
      - "${PROMETHEUS_WEB_CONSOLE_LIBS}"
      - "${PROMETHEUS_WEB_CONSOLE_TEMPLATES}"
      - "${PROMETHEUS_WEB_ADDRESS}"
      - "${PROMETHEUS_STORAGE_GB}"
      - "${PROMETHEUS_STORAGE_EXPIRE}"
    ports:
      - "${PROMETHEUS_HOST_PORT}:5556"
    networks:
      - monitoring
    volumes:
      - "${PROMETHEUS_CONF}"
      - "${PROMETHEUS_DATA}"

  grafana:
    container_name: "grafana_${CONTOUR}"
    image: grafana/grafana:7.5.7
    restart: on-failure
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_HOST_PORT}:3000"
    networks:
      - monitoring
    volumes:
      - "${GRAFANA_DASHBOARDS}"
      - "${GRAFANA_DATASOURCES}"
      - "${GRAFANA_CONFIG}"
      - "${GRAFANA_DATA_DASHBOARDS}"

  node-exporter:
    container_name: "node-exporter_${CONTOUR}"
    image: prom/node-exporter:latest
    restart: on-failure
    depends_on:
      - prometheus
    command:
      - "${NODE_EXPORTER_PROC}"
      - "${NODE_EXPORTER_ROOT_FS}"
      - "${NODE_EXPORTER_SYS_FS}"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - monitoring
    volumes:
      - "${NODE_EXPORTER_SYS_PROC_VOLUME}"
      - "${NODE_EXPORTER_SYS_ROOT_FS_VOLUME}"
      - "${NODE_EXPORTER_SYS_FS_VOLUME}"



  postgres-exporter-pgserver94:
    container_name: "postgres-exporter-pgserver94_${CONTOUR}"
    image: wrouesnel/postgres_exporter:latest
    restart: on-failure
    depends_on:
      - prometheus
    command: "${POSTGRES_EXPORTER_QUERIES}"
    networks:
      - monitoring
    environment:
      - "DATA_SOURCE_NAME=${POSTGRES_DATA_SOURCE_NAME}"
    volumes:
      - "${POSTGRES_EXPORTER_QUERIES_VOLUME}"

  redis:
    container_name: "redis_${CONTOUR}"
    image: redis
    restart: on-failure
    networks:
      - monitoring

  redis-exporter:
    container_name: "redis-exporter_${CONTOUR}"
    image: oliver006/redis_exporter
    restart: on-failure
    depends_on:
      - prometheus
      - redis
    command: -redis.addr redis://redis:6379
    ports:
      - "${REDIS_HOST_PORT}:9121"
    networks:
      - monitoring

volumes:
  elasticsearch_data:
    driver: local